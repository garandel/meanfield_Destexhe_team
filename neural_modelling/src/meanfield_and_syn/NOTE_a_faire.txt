Bah oui c'est plus simple comme ça!!!

RAPPEL A RETIRER :
    log en python execution : 
        spinnman/tranceiver.py l2030 "iter"
        spinn_front_and_common/interface/application_runner.py l 130 "wait"
                                                               l 134 "before wait"



- send_spike.c trigger synapse.c et autre synaptique action.
- multicast actions ne foncitonnent pas -> spin1_send_mc_packet(key, r_int, with_payload) juste le fr focntionne. => dmd Andrew
   |-> certainnement lié au splitters
  
- scamp et P2P gère l'envoie de msg entre chips voir de ce coté pour coms entre MFs MS questions es-ce que le fait de passer par une key ne règle pas ce problème?


get_neuron_id( <- pop_table <- synapse.c <- spike_processing_fast.h

ATTA!!! 
    timer_callback()[c_main_synapses.c]
        <- spike_processing_fast_time_step_loop() => ici que spike est attendue peut le changer
        <- synapse_process_synaptic_row()[synapse.c]
        <- process_current_row() [spike_processing_fast.c]
        
        |-> Le spike n'arrive pas jusqu'à synapse part et d'arrete dans meanfield.
        
        
- neuron_impl_add_inputs() <- neuron_transfer() [meanfield.c] <- timer_callback [c_main_neuron.c] 'read params from synapses where there was write in ring buffer'
<- do_fast_dma_write() [spike_processing_fast.c]

RQ TEST : 
    fait (1) (2&3) => fait (1) val_to_add = 0 | (2&3) val_to_add = 1024 donc fait bien la connection
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

A VOIR:

store_data() dans spike_processing_fast.c l.396

PROBLEME MAJEUR:
on veux faire du dynamique avec quelque chose qui à priori n'est pas fait pour. CF synapses.c l.361-378
  
    |-> peut-être une solution serait de mettre tous les resultats d'une itération 
        dans un buffer tel que all_synaptic_contributions et de faire la même 
        opération que sum() mais en dynamique.
        |-> Dans l'idée : 
                record dans dtcm [neuron_recording_record_accum]
                -> write dans sdram [do_fast_dma_write]
                -> recup avec [do_fast_dma_read]
                -> fait opération [sum()] 
                -> redistribu au autre MFs

    |->OU 
        envoi la data avec spin1_send_packet et spin1_send_fr_packet ou mc
        ET
        écrit un recepteur avec la clef

PETITE QUESTION: c'est quoi fixed route et multicast en fait???



REFLEXION:

synapse_dynamics_process_plastic_synapses()
synapses_process_synaptic_row()
synapse_row_plastic_data_t()
synaptic_contribution()
neuron_transfer()
send_spike.h

24/01

de ce que di Andrew on peut adresser avec key à n'importe quel proc du moment que la clef est la bonne 


essaie avec un buffer
------------------------------------------------------------------------------------
Dans la même veine, 

spike_processing_fast.c <- in_spikes.h <- circular_buffer.h

//! \brief Retrieves a spike from the input spike buffer.
//! \param[out] spike: The spike that was retrieved.
//! \return True if a spike was retrieved, false if the buffer was empty.
static inline bool in_spikes_get_next_spike(spike_t* spike) {
    return circular_buffer_get_next(buffer, spike);
}

//! \brief Get the next item from an existing buffer.
//! \param[in] buffer: The buffer to get the next item from.
//! \param[out] item: The retrieved item.
//! \return Whether an item was retrieved.
static inline bool circular_buffer_get_next(
        circular_buffer buffer, uint32_t *item) {
    bool success = _circular_buffer_not_empty(buffer);

    if (success) {
	    *item = buffer->buffer[buffer->output];
	    buffer->output = _circular_buffer_next(buffer, buffer->output);
    }

    return success;
}
DONC peut éjécter spike et remplacer pas circular_buffer=> 

    EN COURS :
        cf spike_processing_fast_time_step_loop
        
REMARQUE :
    SANS erfc() de math.h ÇA MARCHE DU MOINS ÇA COMPIL MAIS ÇA NE DONNE PAS LE BON RESULTAT OF COURSE
    
    Essaie avec erfcf (float x) donne 5404 byte de trop c'est pas mal mais trop

------------------------------------------------------------------------------------
start_first_dma pas actionnée pas read_synaptic_row diff true 
    => due au fait que doit utiliser spike_processing.c

RQ: penser à SPIKES_WITH_PAYLOADS (neuron-typesdef) car routing_table fonctionne 0->1 et 1->0


population_table_binary_search_impl.c n'arrive pas à actionner SPIKES_WITH_PAYLOADS
doit faire en sorte que :
    log_info("sizeof =%d", sizeof(spike_t)); affiche 8 bytes et non 4 comme 
    actuellement
    
SPIKES_WITH_PAYLOADS à mettre dans synapse_row fonctionne spike_t ont size=8
*
---------------------------------------------------------------------------------------
RQ: direct_synapses.c n'include pas .h?????

IDEE : utilisation de SPIKES_WITH_PAYLOADS et _spike_t_ 
    -> def spike tq spike.payload = data et use send_spike pour projeter avec table
    
Q? : où est créé le spike au sens l'appelation?
 => mettre #define SPIKES_WITH_PAYLOADS dans c_main ou neuron.h ou bien synapse_rox mais avec risque de overflowed le buffer

------------------------------------------------------------------------------------
recaller avec send_spike pour pouvoir utiliser la table de répartition population_table... 

------------------------------------------------------------------------------------

RQ IMPORTANTE:
void user_event_callback(UNUSED uint unused0, UNUSED uint unused1) {
    // Reset the counters as this is a new process
    dma_n_rewires = 0;
    dma_n_spikes = 0;
    

    if (buffer_being_read < N_DMA_BUFFERS) {
        // If the DMA buffer is full of valid data, attempt to reuse it on the
        // next data to be used, as this might be able to make use of the buffer
        // without transferring data
        dma_complete_callback(0, DMA_TAG_READ_SYNAPTIC_ROW);
    } else {
        // If the DMA buffer is invalid, just do the first transfer possible
        setup_synaptic_dma_read(NULL, NULL, NULL);
    }
}

=> setup_synaptic_dma_read(NULL, NULL, NULL); 
        EST UTILISÉ AVEC NULL DONC RIEN NE SE PASSE

--------------------------------------------------------
static inline bool is_something_to_do(
        synaptic_row_t *row, size_t *n_bytes_to_transfer,
        spike_t *spike, uint32_t *n_rewire, uint32_t *n_process_spike) {
    // Disable interrupts here as dma_busy modification is a critical section
    uint cpsr = spin1_int_disable();

    // Check for synaptic rewiring
    while (rewires_to_do) {
        rewires_to_do--;
        spin1_mode_restore(cpsr);
        if (synaptogenesis_dynamics_rewire(time, spike, row,
                n_bytes_to_transfer)) {
            *n_rewire += 1;
            return true;
        }
        cpsr = spin1_int_disable();
    }
    log_info("spike process =%d",*spike);
    // Is there another address in the population table?
    spin1_mode_restore(cpsr);
    if (population_table_get_next_address(spike, row, n_bytes_to_transfer)) {
        *n_process_spike += 1;
        return true;
    }
    cpsr = spin1_int_disable();

    // track for provenance
    uint32_t input_buffer_filled_size = in_spikes_size();
    if (biggest_fill_size_of_input_buffer < input_buffer_filled_size) {
        biggest_fill_size_of_input_buffer = input_buffer_filled_size;
    }

    // Are there any more spikes to process?
    while (in_spikes_get_next_spike(spike)) { => TRUE
        log_info("yep");
        // Enable interrupts while looking up in the master pop table,
        // as this can be slow
        spin1_mode_restore(cpsr);
        if (population_table_get_first_address(
                *spike, row, n_bytes_to_transfer)) {=>>TRUE
            synaptogenesis_spike_received(time, *spike);
            *n_process_spike += 1;
            return true;
        }

        // Disable interrupts before checking if there is another spike
        cpsr = spin1_int_disable();
    }

    // If nothing to do, the DMA is not busy
    dma_busy = false;

    // Restore interrupts
    spin1_mode_restore(cpsr);
    return false;
}

--------------------------------------------------------------------
COMS faite enfin!!!

cherche par où ça passe?
    spike_process :
        // Set up the callbacks
        spin1_callback_on(MC_PACKET_RECEIVED,
                multicast_packet_received_callback, mc_packet_callback_priority);
        spin1_callback_on(MCPL_PACKET_RECEIVED,
                multicast_packet_pl_received_callback, mc_packet_callback_priority); => CE QUI FAIT LE TRANSFERT
        simulation_dma_transfer_done_callback_on(
                DMA_TAG_READ_SYNAPTIC_ROW, dma_complete_callback);
        spin1_callback_on(USER_EVENT, user_event_callback, user_event_priority); => NE FAIT PLUS RIEN DE NEC
        
        
        static bool setup_synaptic_dma_read(dma_buffer *current_buffer,
            uint32_t *n_rewires, uint32_t *n_synapse_processes) {
        ...

        // Keep looking if there is something to do until a DMA can be done
        bool setup_done = false;
        while (!setup_done && is_something_to_do(&row, &n_bytes_to_transfer, => FALSE bcs plus rien à faire is_something_to_do = FALSE
                &spike, &dma_n_rewires, &dma_n_spikes)) {
            ...

        }
        return setup_done;=>FALSE
    }


--------------------------------------------------------------------------
BESOIN!!!!!
------------

d'un buffer dans lequel stocker les payload pour ensuite les traiter!!!
=> circular_buffer CF in_spikes.h

faire attention à spin1_trigger_user_event

QUESTION???*
    comment multicast_packet_pl_received_callback est nourrit? par la fonction spin_callback_on
    
    idée : while dma_busy!=0 then OP over payload=> SURTOUT PAS
    
    
------------------------------------------------------------------------------
CF circular_buffer + c_main + spike_processing+  meanfield_impl + spin1_api

------------------------------------------------------------------------------

c_main() background_callback -> neuron_do_timestep_update (modif du nombre d'arguments) -> neuron_impl_do_timestep_update (modif du nombre d'arguments)

rq seul petite diff faire une buffer pour réaliuser l'opération avant de transferer le resulat.
    originating_spike donne 0 ->job done
    
RQ aurais pas pus utiliser *ring_buffers de c_main.c???????? en changeant weight_t par uint32_t


total_op=0 trouver la bonne place entre main.c ou spike_process ou meanfield_impl??



--------------------------------------------------------------------------------
OPTIMISATION
--------------------------------------------------------------------------------
remplacer dans:

the_synapse_type->exc.synaptic_input_value = firing_rate_Ve;
            //+total_op_real;
the_synapse_type->inh.synaptic_input_value = firing_rate_Vi;


firing_rate_Ve
par
total_op_exc

demême pour inh.

----------------------------
pour spin1_send_mc_packet

faire 
number.as_real = *exc_syn_values; => remplace par state_t firing_rate_Ve
uint32_t r_int = number.as_int; 

de même inh
-----------------------------
DE PLUS doit trouver un moyen de ne pas interférer entre inh et exc pour spin1_send_mc_packet

-----------------------------
 enlever total_exc et inh de input_this timestep et metre deux nouveaux arguments
 dans RK2_midpoint_MF 
 ou
 external_bias div en 2 parties (inh et exc) et garde total_exc dispo
 
 
 QUESTION:
 Il se pourrais que descendre d'un niveau dans le code ie. aller dans 
 meanfield_model_state_update soit plus en accord avec le temprorelle
 
 
 si payload+=0 => payload=0 ALORS pas de connection réellement
 
 
 
 -------------------------7.17------------------------------------
 * introduire inh dans le send_packet -> peu gourmand en mémoire mais bcp en temps
 * trouver une solution pour l'exponentiel -> gourmand en mémoire et en temps
 * 
 