Bah oui c'est plus simple comme ça!!!

RAPPEL A RETIRER :
    log en python execution : 
        spinnman/tranceiver.py l2030 "iter"
        spinn_front_and_common/interface/application_runner.py l 130 "wait"
                                                               l 134 "before wait"



- send_spike.c trigger synapse.c et autre synaptique action.
- multicast actions ne foncitonnent pas -> spin1_send_mc_packet(key, r_int, with_payload) juste le fr focntionne. => dmd Andrew
   |-> certainnement lié au splitters
  
- scamp et P2P gère l'envoie de msg entre chips voir de ce coté pour coms entre MFs MS questions es-ce que le fait de passer par une key ne règle pas ce problème?


get_neuron_id( <- pop_table <- synapse.c <- spike_processing_fast.h

ATTA!!! 
    timer_callback()[c_main_synapses.c]
        <- spike_processing_fast_time_step_loop() => ici que spike est attendue peut le changer
        <- synapse_process_synaptic_row()[synapse.c]
        <- process_current_row() [spike_processing_fast.c]
        
        |-> Le psike n'arrive pas jusqu'à synapse part et d'arrete dans meanfield.
        
        
- neuron_impl_add_inputs() <- neuron_transfer() [meanfield.c] <- timer_callback [c_main_neuron.c] 'read params from synapses where there was write in ring buffer'
<- do_fast_dma_write() [spike_processing_fast.c]

RQ TEST : 
    fait (1) (2&3) => fait (1) val_to_add = 0 | (2&3) val_to_add = 1024 donc fait bien la connection
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

A VOIR:

store_data() dans spike_processing_fast.c l.396

PROBLEME MAJEUR:
on veux faire du dynamique avec quelque chose qui à priori n'est pas fait pour. CF synapses.c l.361-378

PETITE QUESTION: c'est quoi fixed route et multicast en fait???



REFLEXION:

synapse_dynamics_process_plastic_synapses()
synapses_process_synaptic_row()
synapse_row_plastic_data_t()
synaptic_contribution()
neuron_transfer()
send_spike.h

24/01

de ce que di Andrew on peut adresser avec key à n'importe quel proc du moment que la clef est la bonne 